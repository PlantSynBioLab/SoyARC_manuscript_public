dplyr::mutate(TipLabel, tips = name_ID)
dplyr::mutate(TipLabel, tips = str_remove_all(name_ID, ".*/"))
dplyr::mutate(TipLabel, tips = dplyr::str_remove_all(name_ID, ".*/"))
dplyr::mutate(TipLabel, tips = tidyr::str_remove_all(name_ID, ".*/"))
mutate(TipLabel, tips = str_remove_all(name_ID, ".*/"))
tree <- treeio::read.mrbayes(file = "AFB_input/mb_results_mult/AFBmult_final.nex.con.tre")
g_tree <- ggtree(tree, layout="circular", branch.length = 'none') + geom_tiplab(size=3, align = T)
setwd("~/GitHub/SoyArcs_manuscript/final_trees")
tree <- treeio::read.mrbayes(file = "AFB_input/mb_results_mult/AFBmult_final.nex.con.tre")
g_tree <- ggtree(tree, layout="circular", branch.length = 'none') + geom_tiplab(size=3, align = T)
library(ggtree)
tree <- treeio::read.mrbayes(file = "AFB_input/mb_results_mult/AFBmult_final.nex.con.tre")
g_tree <- ggtree(tree, layout="circular", branch.length = 'none') + geom_tiplab(size=3, align = T)
g_tree
ggtree(tree, layout="circular",  color = "darkgrey",
branch.length='prob', ladderize = TRUE) + geom_tiplab(align = F)+
geom_text(aes(label=node), # node numbers
size=3, hjust=-.3, color="red", fontface=2)
#ggsave("AFB_input/figures/AFB_nodes.pdf", width = 15, height = 15)
class_COI1 <- data.frame(get_taxa_name(g_tree, node = 80)) # COI1
class_COI1 <- class_COI1 %>% dplyr::rename(tair_locus = `get_taxa_name.g_tree..node...80.`) %>%
mutate(class = "COI1",
name =ifelse(grepl("Glyma", .$tair_locus), "GmCOI1", ""),
Clade = "V")
library(tidyverse)
class_COI1 <- data.frame(get_taxa_name(g_tree, node = 80)) # COI1
class_COI1 <- class_COI1 %>% dplyr::rename(tair_locus = `get_taxa_name.g_tree..node...80.`) %>%
mutate(class = "COI1",
name =ifelse(grepl("Glyma", .$tair_locus), "GmCOI1", ""),
Clade = "V")
class_AFB4_5 <- data.frame(get_taxa_name(g_tree, node = 49)) # AFB4,5
class_AFB4_5 <- class_AFB4_5 %>% dplyr::rename(tair_locus = `get_taxa_name.g_tree..node...49.`) %>%
mutate(class = "AFB4/5",
name = ifelse(grepl("Glyma", .$tair_locus), "GmAFB4/5", ""),
Clade = "IV")
class_AFB6 <- data.frame(get_taxa_name(g_tree, node = 59)) # AFB6
class_AFB6 <- class_AFB6 %>% dplyr::rename(tair_locus = `get_taxa_name.g_tree..node...59.`) %>%
mutate(class = "AFB6",
name = ifelse(grepl("Glyma", .$tair_locus), "GmAFB6", ""),
Clade = "III")
class_AFB2_3 <- data.frame(get_taxa_name(g_tree, node = 64)) # AFB2_3
class_AFB2_3 <- class_AFB2_3 %>% dplyr::rename(tair_locus = `get_taxa_name.g_tree..node...64.`) %>%
mutate(class = "AFB2/3",
name = ifelse(grepl("Glyma", .$tair_locus), "GmAFB2/3", ""),
Clade = "II")
class_TIR1_AFB1 <- data.frame(get_taxa_name(g_tree, node = 72)) # TIR1_AFB1
class_TIR1_AFB1 <- class_TIR1_AFB1 %>%
dplyr::rename(tair_locus = `get_taxa_name.g_tree..node...72.`) %>%
mutate(class = "TIR1/AFB1",
name = ifelse(grepl("Glyma", .$tair_locus), "GmTIR1/AFB1", ""),
Clade = "I")
TIR_AFB_class <- rbind(class_TIR1_AFB1, class_AFB2_3, class_AFB4_5, class_AFB6, class_COI1)
# Assign orthology
TIR_AFB_class <- TIR_AFB_class %>% mutate(ensembl_gene_id = str_remove_all(.$tair_locus, "\\.[^.]*$"))
Gm_ortholog <- TIR_AFB_class %>%
dplyr::filter(str_detect(ensembl_gene_id, "Glyma")) %>%
# arrange by tree order.
group_by(name) %>% unique() %>%
mutate(ortholog_name = dplyr::row_number()) %>%
mutate(ortholog_name = paste0(name, "_", LETTERS[ortholog_name]))
#write_csv(Gm_ortholog, "AFB_input/AFB_Gm_ortholog.csv")
df4tips <- left_join(TIR_AFB_class, Gm_ortholog)
df4tips[c(27:28), 5] <- c("MtAFB6") #Assign AFB6 to IDs
df4tips[29, 5] <- c("LjAFB6")
df4tips2 <- within(df4tips, ortholog_name[is.na(ortholog_name)] <- tair_locus[is.na(ortholog_name)])
write_csv(Gm_ortholog, "AFB_input/2023_0919_AFB_Gm_ortholog.csv")
setwd("~/GitHub/SoyArcs_manuscript/Manuscript")
TIR <- read.csv("../final_trees/AFB_input/2023_0919_AFB_Gm_ortholog.csv")
View(TIR)
IAA <- read.csv("../final_trees/IAA_input/IAA_Gm_ortholog.csv")
IAA2 <- read.csv("../final_trees/IAA_input/LABELS2_20230917.csv")
View(IAA)
View(IAA2)
read.csv("../final_trees/IAA_input/LABELS2_20230917.csv") %>% .$[30:90, ]
read.csv("../final_trees/IAA_input/LABELS2_20230917.csv") %>% .[30:90, ]
IAA2 <- read.csv("../final_trees/IAA_input/LABELS2_20230917.csv") %>% .[30:90, ]
IAA2 <- IAA2 %>% select(tair_locus, ensembl_gene_id, Class)
merge(IAA, IAA2, by = all)
merge(IAA, IAA2, by = all)
merge(IAA, IAA2, by = "all")
merge(IAA, IAA2, by = "tair_locus", all = TRUE)
IAA2
IAA
IAA_ortho <- merge(IAA, IAA2, by = "tair_locus", all = TRUE)
View(IAA_ortho)
IAA_ortho %>% rename(ensembl_gene_id == ensembl_gene_id.x)
IAA_ortho %>% rename(ensembl_gene_id.x == ensembl_gene_id)
IAA_ortho %>% rename(ensembl_gene_id.x = ensembl_gene_id)
IAA_ortho
IAA_ortho %>% rename(ensembl_gene_id = ensembl_gene_id.x)
IAA_ortho %>% rename(Gene ID = ensembl_gene_id.x,
IAA_ortho %>% rename(`Gene ID` = ensembl_gene_id.x,
`Transcript ID` = tair_locus,
Orthology = ortholog_name,
`Class/Clade` = Class)
IAA_ortho <- IAA_ortho %>% rename(`Gene ID` = ensembl_gene_id.x,
`Transcript ID` = tair_locus,
Orthology = ortholog_name,
`Class/Clade` = Class) %>%
select(`Gene ID`, `Transcript ID`, Orthology, `Class/Clade`)
IAA_ortho <- IAA_ortho %>% rename(`Gene ID` = ensembl_gene_id.x,
`Transcript ID` = tair_locus,
Orthology = ortholog_name,
`Class/Clade` = Class) %>%
select(`Gene ID`, `Transcript ID`, Orthology, `Class/Clade`) %>% mutate(Family = paste0("IAA"))
IAA_ortho$Family <- "IAA"
IAA_ortho <- IAA_ortho %>% rename(`Gene ID` = ensembl_gene_id.x,
`Transcript ID` = tair_locus,
Orthology = ortholog_name,
`Class/Clade` = Class) %>%
select(`Transcript ID`, Orthology, `Class/Clade`)
IAA_ortho <- merge(IAA, IAA2, by = "tair_locus", all = TRUE)
IAA_ortho <- IAA_ortho %>% rename(`Gene ID` = ensembl_gene_id.x,
`Transcript ID` = tair_locus,
Orthology = ortholog_name,
`Class/Clade` = Class) %>%
select(`Transcript ID`, Orthology, `Class/Clade`)
IAA_ortho$Family <- "IAA"
ARF <- read.csv("../final_trees/ARF_input/ARF_classes.xls")
ARF <- readxl::read_xls("../final_trees/ARF_input/ARF_classes.xls")
View(ARF)
ARF <- readxl::read_xls("../final_trees/ARF_input/ARF_classes.xls")
ARF <- readxl::read_xls("../final_trees/ARF_input/ARF_classes.xls", sheet = "Glyma_Class")
ARF <- readxl::read_xls("FINAL_manuscript_gene_INFO.csv", sheet = "Glyma_Class") %>% rename(`Transcript ID` = name, Family = Function, Class/Clade = ARF_Class)
readxl::read_xls("FINAL_manuscript_gene_INFO.csv", sheet = "Glyma_Class")
read_csv("FINAL_manuscript_gene_INFO.csv")
ARF <- read_csv("FINAL_manuscript_gene_INFO.csv")
View(ARF)
View(TIR)
ARF <- read_csv("FINAL_manuscript_gene_INFO.csv")
expression_data <- read_csv("FINAL_manuscript_gene_INFO.csv")
merge(IAA_ortho, expression_data, by = "tair_locus", all =TRUE)
View(IAA_ortho)
merge(IAA_ortho, expression_data, by.x = "`Transcript ID`", by.y = "tair_locus", all =TRUE)
merge(IAA_ortho, expression_data, by.x = "Transcript ID", by.y = "tair_locus", all =TRUE)
comb_expr_df <- merge(IAA_ortho, expression_data, by.x = "Transcript ID", by.y = "tair_locus", all =TRUE)
View(comb_expr_df)
comb_expr_df %>% select(., -Orthology)
View(TIR)
comb_expr_df %>% select(., -Orthology) %>% unite(Class, c(`Class/Clade`, class), "", remove = TRUE)
comb_expr_df$Class <- comb_expr_df$
comb_expr_df %>% select(., -Orthology) %>%
unite(Class, c(`Class/Clade`, class), sep = "", remove = TRUE)
comb_expr_df$Class <- comb_expr_df$
comb_expr_df %>% select( -Orthology) %>%
unite(Class, c(`Class/Clade`, class), sep = "", remove = TRUE)
comb_expr_df$Class <- comb_expr_df$
comb_expr_df %>%
unite(Class, c(`Class/Clade`, class), sep = "", remove = TRUE)
comb_expr_df$Class <- paste(comb_expr_df$`Class/Clade`, comb_expr_df$class)
comb_expr_df$Class <- paste(comb_expr_df$`Class/Clade`, "", comb_expr_df$class)
comb_expr_df %>% mutate(Class = coalesce(`Class/Clade`, class))
comb_expr_df <- comb_expr_df %>% mutate(Class = coalesce(`Class/Clade`, class))
comb_expr_df %>% -select(`...22`)
comb_expr_df %>% -select(`..22`)
comb_expr_df %>% -select(class)
comb_expr_df %>% select(., -class)
comb_expr_df %>% mutate(Class = coalesce(`Class/Clade`, class))
comb_expr_df %>% select(., -class, `Class/Clade`, Orthology, Family.x)
comb_expr_df %>% select(., -class, `Class/Clade`, Orthology, Family.x)
comb_expr_df <- comb_expr_df %>% select(., -class, `Class/Clade`, Orthology, Family.x)
comb_expr_df <- comb_expr_df %>% select(., -c(class, `Class/Clade`, Orthology, Family.x))
comb_expr_df <- comb_expr_df %>% select(-c(class, `Class/Clade`, Orthology, Family.x))
comb_expr_df <- merge(IAA_ortho, expression_data, by.x = "Transcript ID", by.y = "tair_locus", all =TRUE)
comb_expr_df <- comb_expr_df %>% mutate(Class = coalesce(`Class/Clade`, class))
comb_expr_df <- comb_expr_df %>% select(-c(class, `Class/Clade`, Orthology, Family.x))
comb_expr_df <- merge(IAA_ortho, expression_data, by.x = "Transcript ID", by.y = "tair_locus", all =TRUE)
comb_expr_df <- comb_expr_df %>% mutate(Class = coalesce(`Class/Clade`, class))
comb_expr_df <- comb_expr_df %>%
select(-c(class, `Class/Clade`, Orthology, Family.x, `...22`))
head(comb_expr_df)
comb_expr_df %>%
group_by(ensembl_gene_id) %>%
mutate(Class = na.omit(Class)) %>%
ungroup()
comb_expr_df %>%
group_by(ensembl_gene_id) %>%
mutate(Class = if (all(is.na(Class))) NA else na.omit(Class)) %>%
ungroup()
comb_expr_df <- comb_expr_df %>%
group_by(ensembl_gene_id) %>%
mutate(Class = if (all(is.na(Class))) NA else na.omit(Class)) %>%
ungroup()
comb_expr_df <- merge(IAA_ortho, expression_data, by.x = "Transcript ID", by.y = "tair_locus", all =TRUE)
comb_expr_df <- comb_expr_df %>% mutate(Class = coalesce(`Class/Clade`, class))
comb_expr_df <- comb_expr_df %>%
select(-c(class, `Class/Clade`, Orthology, Family.x, `...22`))
comb_expr_df2 <- comb_expr_df %>%
group_by(ensembl_gene_id) %>%
mutate(Class = if (all(is.na(Class))) NA else na.omit(Class)) %>%
ungroup()
View(comb_expr_df2)
View(comb_expr_df)
# separate Class into Class and Clade
comb_expr_df2 %>% separate(Class, c('Class', 'Clade'),sep = " - ")
# separate Class into Class and Clade
comb_expr_df2 <- comb_expr_df2 %>% separate(Class, c('Class', 'Clade'),sep = " - ")
# Now combine TIR df to get their new clades.
df <- merge(comb_expr_df2, TIR, by.x = "ensembl_gene_id", by.y = "ensembl_gene_id", all = TRUE)
View(df)
df <- df %>% mutate(Clade = coalesce(Clade.x, Clade.y))
df %>% select(-c(Clade.x, Clade.y, class, tair_locus, ortholog_name, name.y))
df <- df %>% select(-c(Clade.x, Clade.y, class, tair_locus, ortholog_name, name.x, name.y)) %>% rename(Orthology = ortholog_number)
df %>%
group_by(ensembl_gene_id) %>%
mutate(Clade = if(all(is.na(Clade))) NA else na.omit(Clade)) %>%
ungroup()
df <- df %>%
group_by(ensembl_gene_id) %>%
mutate(Clade = if(all(is.na(Clade))) NA else na.omit(Clade)) %>%
ungroup()
# I can add clades to ARFs as I have not saved that as csv file when I built trees.
df %>% mutate(Clade = ifelse(grepl("ARF", .$Family.y) & grepl("A", .$Class), "II", Class))
# I can add clades to ARFs as I have not saved that as csv file when I built trees.
df %>% mutate(Clade = ifelse(grepl("ARF", .$Family.y) & grepl("A", .$Class), "II",
ifelse(grepl("ARF", .$Family.y) & grepl("B", .$Class), "I",
ifelse(grepl("ARF", .$Family.y) & grepl("C", .$Class), "III", Class))))
# I can add clades to ARFs as I have not saved that as csv file when I built trees.
df <- df %>% mutate(Clade = ifelse(grepl("ARF", .$Family.y) & grepl("A", .$Class), "II",
ifelse(grepl("ARF", .$Family.y) & grepl("B", .$Class), "I",
ifelse(grepl("ARF", .$Family.y) & grepl("C", .$Class), "III", Class))))
# Now combine TIR df to get their new clades.
df <- merge(comb_expr_df2, TIR, by.x = "ensembl_gene_id", by.y = "ensembl_gene_id", all = TRUE)
df <- df %>% mutate(Clade = coalesce(Clade.x, Clade.y))
df <- df %>% select(-c(Clade.x, Clade.y, class, tair_locus, ortholog_name, name.x, name.y)) %>% rename(Orthology = ortholog_number)
df <- df %>%
group_by(ensembl_gene_id) %>%
mutate(Clade = if(all(is.na(Clade))) NA else na.omit(Clade)) %>%
ungroup()
# I can add clades to ARFs as I have not saved that as csv file when I built trees.
df <- df %>% mutate(Clade = ifelse(grepl("ARF", .$Family.y) & grepl("A", .$Class), "II",
ifelse(grepl("ARF", .$Family.y) & grepl("B", .$Class), "I",
ifelse(grepl("ARF", .$Family.y) & grepl("C", .$Class), "III", Clade))))
df %>% mutate(Class = ifelse(grepl("Glyma.02G218100", .$ensembl_gene_id), "A", Class),
Clade = ifelse(grepl("Glyma.02G218100", .$ensembl_gene_id), "I", Clade))
df2 <- df %>% mutate(Class = ifelse(grepl("Glyma.02G218100", .$ensembl_gene_id), "A", Class),
Clade = ifelse(grepl("Glyma.02G218100", .$ensembl_gene_id), "I", Clade))
View(df2)
df2 %>% rename(Family = Family.y)
df2 %>% rename(Family = Family.y) %>% drop_na()
df2 <- df2 %>% rename(Family = Family.y) %>% drop_na()
df2 <-
df %>% mutate(Class = ifelse(grepl("Glyma.02G218100", .$ensembl_gene_id), "A", Class),
Clade =
ifelse(grepl("Glyma.02G218100", .$ensembl_gene_id), "I", Clade))
df2 <- df2 %>% rename(Family = Family.y, `Gene ID` = ensembl_gene_id) %>% drop_na()
# save Table 1 for manuscript
df2 %>% select(`Gene ID`, Orthology, `Transcript ID`, Class, Clade, Family)
# save Table 1 for manuscript
df2 %>% select(`Gene ID`, Orthology, `Transcript ID`, Class, Clade, Family) %>% order_by(Family)
# save Table 1 for manuscript
df2 %>% select(`Gene ID`, Orthology, `Transcript ID`, Class, Clade, Family) %>% arrange(Family, Class, Orthology)
# save Table 1 for manuscript
df2 %>% select(`Gene ID`, Orthology, `Transcript ID`, Class, Clade, Family) %>% arrange(Class, Family,  Orthology)
# save Table 1 for manuscript
df2 %>% select(`Gene ID`, Orthology, `Transcript ID`, Class, Clade, Family) %>% arrange(Family, Class, Orthology)
# save Table 1 for manuscript
df2 %>% select(`Gene ID`, Orthology, `Transcript ID`, Class, Clade, Family) %>% arrange(Family, Clade, Class, Orthology)
# save Table 1 for manuscript
df2 %>% select(`Gene ID`, Orthology, `Transcript ID`, Class, Clade, Family) %>% arrange(Family, Clade, Class, Orthology) %>% write_csv("Table1.csv")
write_csv(df2, "20230919_expression_heatmap.csv")
View(df2)
library(heatmaply)
library(magrittr) #for lots of pipes
library(ggplot2)
library(pheatmap)
library(devtools)
# Source:
# https://stackoverflow.com/questions/43051525/how-to-draw-pheatmap-plot-to-screen-and-also-save-to-file
save_pheatmap_pdf <- function(x, filename, width=7, height=4) {
stopifnot(!missing(x))
stopifnot(!missing(filename))
pdf(filename, width=width, height=height)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
# https://davetang.org/muse/2018/05/15/making-a-heatmap-in-r-with-the-pheatmap-package/
save_pheatmap_png <- function(x, filename, width=1200, height=1000, res = 150) {
png(filename, width = width, height = height, res = res)
grid::grid.newpage()
grid::grid.draw(x$gtable)
dev.off()
}
Expr_data3_FINAL <- read_csv("Expr_data3_FINAL_edited.csv")
View(df2)
setwd("~/GitHub/SoyArcs_manuscript/Expression_files/Script")
Expr_data3_FINAL <- read_csv("Expr_data3_FINAL_edited.csv")
Expr_data3_FINAL <- Expr_data3_FINAL %>% drop_na() %>%  dplyr::select(., -Class)
Expr_data3_FINAL
Expr_data3_FINAL <- Expr_data3_FINAL %>% drop_na() %>%  dplyr::select(., -Class)
Expr_data3_FINAL <- Expr_data3_FINAL %>% drop_na() %>%  dplyr::select(., -class)
# Unite Tair_locus with ortholog_name columns
Expr_data3_FINAL2 <- Expr_data3_FINAL %>% dplyr::relocate(ortholog_name, .before = tair_locus) %>%
unite("heatmap_label", ortholog_name:tair_locus, sep = "/", remove = FALSE) %>%
mutate(ortholog_number = str_extract(tair_locus, "\\.[0-9]*$")) %>%
dplyr::relocate(ortholog_number, .after = ortholog_name ) %>%
unite("ortholog_number", ortholog_name:ortholog_number, sep = "")
Expr_data3_FINAL2
View(Expr_data3_FINAL2)
# Make a heatmap label by uniting orthology column and gene ID column
df2 %>% unite(col = c(`Gene ID`, Orthology))
# Make a heatmap label by uniting orthology column and gene ID column
df2 %>% unite(col = c(`Gene ID`, Orthology), sep = "_", remove = TRUE)
# Make a heatmap label by uniting orthology column and gene ID column
df2 %>% relocate(`Gene ID`, .after = `Transcript ID`) %>%  unite(col = c(`Gene ID`, Orthology), sep = "_", remove = TRUE)
df2 %>% relocate(`Gene ID`, .after = `Transcript ID`)
# Make a heatmap label by uniting orthology column and gene ID column
df2 %>%
#relocate(`Gene ID`, .after = `Transcript ID`) %>%
unite("heatmap_label", col = c(`Gene ID`, Orthology), sep = "_", remove = TRUE)
# Make a heatmap label by uniting orthology column and gene ID column
df2 %>%
#relocate(`Gene ID`, .after = `Transcript ID`) %>%
unite("heatmap_label", `Gene ID`:Orthology, sep = "_", remove = TRUE)
# Make a heatmap label by uniting orthology column and gene ID column
heatmap_df <- df2 %>%
relocate(`Gene ID`, .after = `Transcript ID`) %>%
unite("heatmap_label", `Gene ID`:Orthology, sep = "_", remove = TRUE)
View(heatmap_df)
# Make a heatmap label by uniting orthology column and gene ID column
heatmap_df <- df2 %>%
relocate(`Gene ID`, .after = `Transcript ID`) %>%
unite("heatmap_label", `Gene ID`:Orthology, sep = "|", remove = TRUE)
# Make a heatmap label by uniting orthology column and gene ID column
heatmap_df <- df2 %>%
relocate(`Gene ID`, .after = `Transcript ID`) %>%
unite("heatmap_label", `Gene ID`:Orthology, sep = "/", remove = TRUE)
# Make a heatmap label by uniting orthology column and gene ID column
heatmap_df <- df2 %>%
relocate(`Gene ID`, .after = `Transcript ID`) %>%
unite("heatmap_label", `Gene ID`:Orthology, sep = "|", remove = TRUE)
Expr_data_Norm <- heatmap_df
for (j in 1:nrow(Expr_data_Norm)) {
for (i in 8:ncol(Expr_data_Norm)) {
Expr_data_Norm[j,i]<-
(Expr_data_Norm[j,i]-rowMeans(Expr_data_Norm[j,8:ncol(Expr_data_Norm)]))/
sd(Expr_data_Norm[j,8:ncol(Expr_data_Norm)])
}
}
# Genes with an average expression across tissues that are less than 2 TPM, will be excluded from downtream analysis
head(df)
# Genes with an average expression across tissues that are less than 2 TPM, will be excluded from downtream analysis
head(heatmap_df)
# Genes with an average expression across tissues that are less than 2 TPM, will be excluded from downtream analysis
heatmap_df %>% filter(Average_Expression > 2)
# Genes with an average expression across tissues that are less than 2 TPM, will be excluded from downtream analysis
heatmap_df <- heatmap_df %>% filter(Average_Expression > 2)
Expr_data3_FINAL2
Expr_data_Norm <- heatmap_df %>% relocate(c(Class, Clade), .after = Family)
Expr_data_Norm
Expr_data_Norm <- heatmap_df %>% relocate(c(Class, Clade), .after = Family) %>% select(-Average_Expression)
Expr_data_Norm
# Iterate through each row of the 'Expr_data_Norm' data frame.
for (j in 1:nrow(Expr_data_Norm)) {
# Iterate through columns starting from the 8th column to the last column.
for (i in 6:ncol(Expr_data_Norm)) {
# Calculate the z-score normalization for each cell in the data frame.
# 1. Subtract the mean of the selected row (columns 8 to the last column).
# 2. Divide by the standard deviation of the selected row.
Expr_data_Norm[j,i]<-
(Expr_data_Norm[j,i]-rowMeans(Expr_data_Norm[j,6:ncol(Expr_data_Norm)]))/
sd(Expr_data_Norm[j,6:ncol(Expr_data_Norm)])
}
}
Expr_data_Norm <-Expr_data_Norm %>% drop_na() %>% column_to_rownames(., var = "heatmap_label")
View(Expr_data_Norm)
pheatmap::pheatmap(mat = Expr_data_Norm[,5:18],  annotation_row = Expr_data3_Norm[,c(4,6)],
fontsize = 5,
fontsize_row = 3,
cellwidth = 5,
cutree_cols = 4,
cellheight = 3,
clustering_distance_rows = "euclidean",
main = "Expression analysis")
pheatmap::pheatmap(mat = Expr_data_Norm[,5:18],  annotation_row = Expr_data_Norm[,c(4,6)],
fontsize = 5,
fontsize_row = 3,
cellwidth = 5,
cutree_cols = 4,
cellheight = 3,
clustering_distance_rows = "euclidean",
main = "Expression analysis")
pheatmap::pheatmap(mat = Expr_data_Norm[,5:18],  annotation_row = Expr_data_Norm[,c(2,3,4)],
fontsize = 5,
fontsize_row = 3,
cellwidth = 5,
cutree_cols = 4,
cellheight = 3,
clustering_distance_rows = "euclidean",
main = "Expression analysis")
pheatmap::pheatmap(mat = Expr_data_Norm[,5:18],  annotation_row = Expr_data_Norm[,c(3,4)],
fontsize = 5,
fontsize_row = 3,
cellwidth = 5,
cutree_cols = 4,
cellheight = 3,
clustering_distance_rows = "euclidean",
main = "Expression analysis")
# Specify colors
Class_df1_colors = list(Family = c(ARF = "Purple", IAA = "yellow", `AFB/TIR1`="lightblue"), Class = c(A="purple", B="lightseagreen", C="orange", TIR1="green", `AFB2/3`="blue", `AFB4/5`="yellow", COI1="pink", AFB6="pink2", `COI1-A`="pink1", `COI1-A`="pink3"))
(expr_analysis <- pheatmap::pheatmap(mat = Expr_data_Norm[,5:18],  annotation_row = Expr_data3_Norm[,c(3,4)], annotation_colors = Class_df1_colors[1],
fontsize = 5,
fontsize_row = 3,
cellwidth = 5,
cellheight = 3,
clustering_distance_rows = "euclidean",
treeheight_row = 300,
cutree_rows = 6,
# main = "Expression analysis - normalized by transcripts",
color = c("mistyrose", "white", "mistyrose2", "lightpink", "lightblue", "turquoise", "lightslateblue")))
(expr_analysis <- pheatmap::pheatmap(mat = Expr_data_Norm[,5:18],  annotation_row = Expr_data_Norm[,c(3,4)], annotation_colors = Class_df1_colors[1],
fontsize = 5,
fontsize_row = 3,
cellwidth = 5,
cellheight = 3,
clustering_distance_rows = "euclidean",
treeheight_row = 300,
cutree_rows = 6,
# main = "Expression analysis - normalized by transcripts",
color = c("mistyrose", "white", "mistyrose2", "lightpink", "lightblue", "turquoise", "lightslateblue")))
(expr_analysis <- pheatmap::pheatmap(mat = Expr_data_Norm[,5:18],  annotation_row = Expr_data_Norm[,c(2,3)], annotation_colors = Class_df1_colors[1],
fontsize = 5,
fontsize_row = 3,
cellwidth = 5,
cellheight = 3,
clustering_distance_rows = "euclidean",
treeheight_row = 300,
cutree_rows = 6,
# main = "Expression analysis - normalized by transcripts",
color = c("mistyrose", "white", "mistyrose2", "lightpink", "lightblue", "turquoise", "lightslateblue")))
(expr_analysis <- pheatmap::pheatmap(mat = Expr_data_Norm[,5:18],  annotation_row = Expr_data_Norm[,c(2,3)], annotation_colors = Class_df1_colors[1],
fontsize = 5,
fontsize_row = 3,
cellwidth = 5,
cellheight = 3,
clustering_distance_rows = "euclidean",
treeheight_row = 300,
cutree_rows = 6,
# main = "Expression analysis - normalized by transcripts",
color = c("grey90", "white", "mistyrose2", "lightpink", "lightblue", "turquoise", "lightslateblue")))
(expr_analysis <- pheatmap::pheatmap(mat = Expr_data_Norm[,5:18],  annotation_row = Expr_data_Norm[,c(2,3)], annotation_colors = Class_df1_colors[1],
fontsize = 5,
fontsize_row = 3,
cellwidth = 5,
cellheight = 3,
clustering_distance_rows = "euclidean",
treeheight_row = 300,
cutree_rows = 6,
# main = "Expression analysis - normalized by transcripts",
color = c("grey80", "white", "mistyrose2", "lightpink", "lightblue", "turquoise", "lightslateblue")))
(expr_analysis <- pheatmap::pheatmap(mat = Expr_data_Norm[,5:18],  annotation_row = Expr_data_Norm[,c(2,3)], annotation_colors = Class_df1_colors[1],
fontsize = 5,
fontsize_row = 3,
cellwidth = 5,
cellheight = 4,
clustering_distance_rows = "euclidean",
treeheight_row = 300,
cutree_rows = 6,
# main = "Expression analysis - normalized by transcripts",
color = c("grey80", "white", "mistyrose2", "lightpink", "lightblue", "turquoise", "lightslateblue")))
save_pheatmap_pdf(expr_analysis, "20230917_FINAL_NORM_by_Transcript.pdf", height = 11, width = 7)
save_pheatmap_png(expr_analysis, "20230917_FINAL_NORM_by_Transcript.pdf", height = 11, width = 7, dpi = 1000)
save_pheatmap_png(expr_analysis, "20230917_FINAL_NORM_by_Transcript.pdf", height = 11, width = 7)
save_pheatmap_png(expr_analysis, "20230917_FINAL_NORM_by_Transcript.png", height = 11, width = 7)
save_pheatmap_pdf(expr_analysis, "20230917_FINAL_NORM_by_Transcript.pdf", height = 11, width = 7)
save_pheatmap_png(expr_analysis, "20230917_FINAL_NORM_by_Transcript.png", height = 35, width = 7)
(expr_analysis <- pheatmap::pheatmap(mat = Expr_data_Norm[,5:18],  annotation_row = Expr_data_Norm[,c(2,3)], annotation_colors = Class_df1_colors[1],
fontsize = 7,
fontsize_row = 3,
cellwidth = 5,
cellheight = 4,
clustering_distance_rows = "euclidean",
treeheight_row = 300,
cutree_rows = 6,
# main = "Expression analysis - normalized by transcripts",
color = c("grey80", "white", "mistyrose2", "lightpink", "lightblue", "turquoise", "lightslateblue")))
(expr_analysis <- pheatmap::pheatmap(mat = Expr_data_Norm[,5:18],  annotation_row = Expr_data_Norm[,c(2,3)], annotation_colors = Class_df1_colors[1],
fontsize = 6,
fontsize_row = 3,
cellwidth = 5,
cellheight = 4,
clustering_distance_rows = "euclidean",
treeheight_row = 300,
cutree_rows = 6,
# main = "Expression analysis - normalized by transcripts",
color = c("grey80", "white", "mistyrose2", "lightpink", "lightblue", "turquoise", "lightslateblue")))
(expr_analysis <- pheatmap::pheatmap(mat = Expr_data_Norm[,5:18],  annotation_row = Expr_data_Norm[,c(2,3)], annotation_colors = Class_df1_colors[1],
fontsize = 6,
fontsize_row = 5,
cellwidth = 5,
cellheight = 4,
clustering_distance_rows = "euclidean",
treeheight_row = 300,
cutree_rows = 6,
# main = "Expression analysis - normalized by transcripts",
color = c("grey80", "white", "mistyrose2", "lightpink", "lightblue", "turquoise", "lightslateblue")))
save_pheatmap_pdf(expr_analysis, "20230917_FINAL_NORM_by_Transcript.pdf", height = 11, width = 7)
(expr_analysis <- pheatmap::pheatmap(mat = Expr_data_Norm[,5:18],  annotation_row = Expr_data_Norm[,c(2,3)], annotation_colors = Class_df1_colors[1],
fontsize = 6,
fontsize_row = 5,
cellwidth = 6,
cellheight = 5,
clustering_distance_rows = "euclidean",
treeheight_row = 300,
cutree_rows = 6,
# main = "Expression analysis - normalized by transcripts",
color = c("grey80", "white", "mistyrose2", "lightpink", "lightblue", "turquoise", "lightslateblue")))
save_pheatmap_pdf(expr_analysis, "20230917_FINAL_NORM_by_Transcript.pdf", height = 11, width = 7)
save_pheatmap_pdf(expr_analysis, "20230917_FINAL_NORM_by_Transcript.pdf", height = 15, width = 10)
save_pheatmap_pdf(expr_analysis, "20230917_FINAL_NORM_by_Transcript.pdf", height = 13, width = 10)
save_pheatmap_pdf(expr_analysis, "20230917_FINAL_NORM_by_Transcript.pdf", height = 12, width = 9)
